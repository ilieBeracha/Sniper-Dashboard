// ──────────────────────────────────────────────────────────────
// File: src/types/score.ts
// Consolidated — existing types + distance-level additions
// ──────────────────────────────────────────────────────────────

/*──────────────────────── parent ────────────────────────*/
export interface Score {
  id?: string;

  assignment_session: {
    id: string;
    training_id: string;
    assignment_id: string;
    assignment: { assignment_name: string };
  };

  /*  ❱❱  high-level metrics  */
  time_until_first_shot: number | null;
  wind_strength: number | null;
  first_shot_hit: boolean | null;
  wind_direction: number | null;
  note: string | null;
  target_eliminated: boolean | null;

  /*  ❱❱  moved out of this table — now lives in `score_ranges`
      (kept optional just to avoid breaking legacy code that still
       reads these props — they will always be null/undefined)  */
  distance?: number | null;
  shots_fired?: number | null;
  target_hit?: number | null;

  /*  misc  */
  day_night?: DayNight | null;
  created_at?: string;
  mistake?: any;

  /*  associations  */
  score_participants: ScoreParticipant[];
  score_ranges?: ScoreRangeRow[]; // <── NEW eager-load-able relation
  squad_id: string;
  creator_id: string;
  squad: { squad_name: string };

  position: PositionScore;
}

/*────────────────────── distance rows ───────────────────────*/
export interface ScoreRangeRow {
  id?: string; // PK (uuid, generated by DB)
  score_id: string; // FK → score.id

  distance: number; // metres
  shots_fired: number;
  target_hit: number;

  created_at?: string; // timestamptz (DB default now())
}

/** payload used when inserting a new distance row */
export type NewScoreRange = Omit<ScoreRangeRow, "id" | "created_at">;

/*──────────────────── participants (unchanged) ──────────────*/
export interface ScoreParticipant {
  id?: string;
  score_id?: string;
  user_id: string;
  user: { first_name: string; last_name: string; email: string };
  user_duty: UserDuty;

  weapon_id?: string;
  weapon?: { weapon_type: string; serial_number: string };

  equipment_id?: string;
  equipment?: { equipment_type: string; serial_number: string };
}

/*──────────────────────────── misc enums ───────────────────────────*/
export type DayNight = "day" | "night";

export interface UserDuty {
  SNIPER: "sniper";
  SPOTTER: "spotter";
}

export enum PositionScore {
  LYING = "lying",
  STANDING = "standing",
  SITTING = "sitting",
  OPERATIONAL = "operational",
}

/*──────────────────────────── Zustand slice shape ───────────────────────────*/
export interface ScoreState {
  /* data */
  scores: Score[];
  scoreRanges: ScoreRangeRow[];

  /* actions */
  getScoresByTrainingId: (trainingId: string) => Promise<void>;
  getScoreRangesByTrainingId: (trainingId: string) => Promise<void>;
  addScoreRange: (payload: NewScoreRange) => Promise<void>;
}
